OQUE É NODE.JS?

- O node.js é uma runtime de JavaScript;
- Ou seja, uma biblioteca utilizada por um compilador durante a execução do programa;
- que esta construída na V8 engine(escrita em C++ da Google);
- Possibilitando criar softwares em JS no lado do servidor;
- Temos então um código JS rodando em C++ para garantir alta performance;

_______________________________________________________

Oque é NPM ?

- O npm é um gerenciador de pacotes do Node;
- Vamos poder utilizar bibliotecas de terceiros, baixando elas pelo npm;
- E também executar determinados scripts no nosso programa;
- Dificilmente um software em node.js não utiliza o npm;
- Os módulos externos ficam numa pasta chamada node_modules; 
- Ela deve ser descartável, ou seja, a cada instalação do projeto baixamos todos os pacotes novamente;
_______________________________________________________

Instalação Node Windows

- O download do node.js é feito no site oficial nodejs.org
- Vamos baixar um arquivo .msi, que é o instalador;
- É interessante saber que o npm vem junto do Node;
- Após a instalação podemos testar o Node eo npm em um terminal, para validar a instalação;
- Note que os binários precisam estar no PATH, este passo está na instalação no node;
_______________________________________________________

Instalação cmder

- Caso seja necessário, vamos utilizar o cmder como terminal do Windows;
- Este software não quer instalação;
- E é muito semelhante ao terminal do Linux;
- Geralmente utilizamos servidores em Linux, então estar acostumado com esse tipo de terminal é de grande ajuda;
- Além disso, algumas ferramentas como Node e Docker, por exemplo utilizam muito o terminal;
______________________________________________________

Executando o node

- Na maioria das vezes estaremos executando o node via arquivos do nosso projeto;
- Porém é possível também executá-lo via terminal;
- Basta digitar: node;
- O Node.js possui todas as funcionalidades de JavaScript;
- O nome do recurso é REPL (read evaluate print loop)
- Vamos experimentar!
_______________________________________________________

Nosso primeiro programa

- Agora vamos criar algo mais sólido, um programa simples baseado em um arquivo;
- A extensão dos arquivos de Node serão .js
- Vamos executar o arquivo com o comando node <arquivo>
- O código será interpretado e o programa executado;
_______________________________________________________

Utilizando um módulo

- Agora vamos evoluir o nível de nosso programas;
- Importaremos um módulo do Node: o file System;
- Este módulo serve para trabalhar com diretórios, arquivos e etc;
- E ele é um Core Module, ou seja, não é necessário instalar;
- veremos mais sobre modules ao longo do curso;
- Podemos importar módulos com a instrução import;
_______________________________________________________

Como tirar o melhor proveito

- Faça todos os exercícios, eles foram pensados em agregar no aprendizado e fixar conhecimento;
- Crie o código junto comigo!;
- Tente responder as dúvidas de outros alunos;
- Crie projetos práticos, teste coisas novas;
- Dica extra: ouça e depois pratique;
_______________________________________________________

SEÇÂO DE FUNDAMENTOS

Oque são módulos

- Módulos são scripts reaproveitáveis, que utilizamos bastante programando em Node;
- Eles são divididos em três categorias;
- Internos: módulos que nós desenvolvemos
- Core Modules: módulos que vem com Node.js;
- Externos: módulos que instalamos via npm;
_______________________________________________________

Módulos internos

- Os módulos internos são criados nas pastas do nosso projeto;
- Precisamos exportar o módulo;
- Podemos utilizar a instrução module.exports;
- E importar onde precisamos utilizar;
- Para importar vamos utilizar a instrução require;
- Vamos criar um módulo!;
_______________________________________________________

Export e Import

- Com Node.js também é possível utilizar o export e import do ES6;
- São funcionalidades mais modernas de importação e exportação;
- Com mais recursos do que as que vimos anteriormente;
- Para isso precisamos modificar os nossos arquivos para a extensão .mjs;
- E então podemos exportar uma com export default;
- E importar com import, uma única função, caso seja necessário;
_______________________________________________________

Core Modules

- No node temos diversos Core Modules, que são os que vêm prontos para serem utilizados;
- Eles resolvem diversos problemas, como: trabalhar com arquivo e diretórios, servir aplicações e etc.
- Precisamos importar estes módulos no projeto para poder utilizar;
- Vamos utilizar um core module!
_______________________________________________________

Ler argumentos

- O Node permite o envio de argumentos via linha de comando;
- Passamos ele após a instrução de execução do arquivo;
- Os argumentos ficam em um array chamado:process.argv
- Onde podemos fazer um loop e resgatar os valores enviados;
- Vamos ver na prática;
_______________________________________________________

Módulos externos

- Os módulos externos podem ser instalados via npm;
- Para isso precisamos inicializar o npm no projeto, com: npm init;
- A partir daí os módulos ficam mapeados e podemos instalar módulos;
- Que são salvos na pasta node modules;
- Podemos instalar módulos com npm install <nome>;
- Vamos olhar isso na prática!
_______________________________________________________ 

Algo prático com argumentos

- Podemos utilizar os argumentos recebidos para aplicar no nosso programa alguma lógica;
- Basta encapsular em variáveis e depois utilizálos;
- Ou seja, podemos a partir do terminal, executar também uma função de módulo interno nosso, por exemplo;
- Vamos ver na prática!
_______________________________________________________

Explorando o console

- Temos uma grande variedade de métodos no console, como o console.log;
- podemos imprimir mais de uma variável por vez;
- Inserir variáveis entre strings;
- Há um método para limpar as mensagens de console;
- Vamos ver na prática
_______________________________________________________

Melhorando a visualização

- Há um módulo externo chamado chalk;
- Ele pode deixar a visualização do console mais agradável;
- Fazendo com que seja possível expressar um feedback com base em cores;
- Vamos ver na prática;
_______________________________________________________

Lendo entrada de dados

- Podemos ler dados do usuário com o módulo readline, um core module;
- Neste caso utilizamos o método question, que faz uma pergunta a ser respondida pelo usuário;
- Depois podemos processar a resposta e entregar um retorno;
- Vamos ver na prática;
_______________________________________________________

IMPORTANTE PARA O CURSO

- utilize esse pacote nessa versão para conseguir seguir o curso pois a versão mais recente possui algumas diferenças na importação, podendo gerar alguns erros.
 
npm install inquirer@8.1.2
_______________________________________________________

Melhorando sua leitura de dados 

- Há um módulo externo chamado inquirer;
- Que é muito mais completo para resgatar e lidar com o input do usuário;
- Além disso, é baseado em Promises, o que torna sua utilização mais simples;
- Vamos ver na prática
_______________________________________________________

Event Loop

- O Event Loop é um recurso da arquitetura do Node;
- O node.js executa uma linha por vez, e de cima para baixo do código escrito;
- Isso nos ajuda a evitar problemas de concorrência, garantindo a execução do código;
- Precisamos apenas cuidar com bloqueios no fluxo, como loops inifinitos;
- vamos ver na prática;
_______________________________________________________

Event Emitter

- O event Emitter se comporta como os eventos do navegador;
- Podemos ativar um código em alguns pontos da aplicação, como o início;
É um Core Module chamado events;
- Precisamos instanciar a classe EventEmitter que vem deste módulo;
- E então utilizar os métodos para atingir nosso objetivo;
- Vamos ver na prática;
_______________________________________________________

Síncrono e Assíncrono

- Em Node.js temos duas opções ao executar métodos;
- Conhecidas como sync e async;
- Forma síncrona: o código espera ser totalmente executado para prosseguir;
- Forma assíncrona: o código continue progredindo e em um ponto futuro obtém a resposta da execução assíncrona;
- Vamos ver na prática;
_______________________________________________________

Erros no Node

- Temos duas formas principais para gerar ou evidenciar erros em Node.js;
- throw: uma forma de encerrar um programa, gerando um novo erro;
- try catch: uma forma de evidenciar algo que deu errado em um bloco de código e exibir a mensagem de erro;
- Vamos ver na prática;
_______________________________________________________

Core Modules

Sobre os Core Modules

- vamos ver diversos Core Modules em detalhes, que são fundamentais para a criação de softwares em Node;
- http: módulo para criar servidores HTTP;
- path: extrair informações de paths (caminhos) de arquivos;
- fs: file system, leitura e escrita de arquivos;
- url: módulo para trabalhar com URLs;

_______________________________________________________

Módulo HTTP

- Podemos criar um servidor HTTp com este módulo;
- Ou seja, receber uma requisição e enviar código HTML como resposta por exemplo;
- Vamos utilizar alguns métodos como createServer, para  criação de servidor;
- E também listen, para determinar a porta;
- Vamos ver na prática;

- para visualizar a mensagem de resposta do servidor é necessário é no navegador e colocar localhost:3000 no meu caso porta definida por mim;
_______________________________________________________

Parando o serviço

- Há alguns serviços do Node que ocupam a aba do terminal para continuar rodando;
- Um destes é o módulo http;
- Para para este serviço basta utilizar: ctrl + c;
- Isso é útil quando há um problema no código também;
_______________________________________________________

Retornando HTML com http

- Para retornar HTML precisamos implementar mais recursos;
- Podemos adicionar um status code no retorno, com a propriedade statusCode;
- Mudar os headers para text/html;
- E retornar o HTML pelo método end http;
- Vamos ver na prática;
_______________________________________________________

Atualizações de projeto

- Para emitir as atualizações do projeto precisamos sempre reiniciar o servidor;
- Ou seja: salvar, encerrar e reiniciar, este é o processo;
- Isso é terrível para a produtividade;
- Nas próximas aulas veremos como controlar este problema;
- Mas primeiro vamos ver o que acontece;
_______________________________________________________

Modulo url

- O módulo url serve para decompor uma URL que passamos para o método parse;
- Podemos resgatar: host, path, search, query e etc;
- A partir destas informações podemos alterar a lógica do nosso código;
- Vamos ver na prática;
_______________________________________________________

Unindo os módulos http e url

- Podemos trabalhar com estes módulos juntos e ter um resultado interessante;
- com o http criamos nosso server e alteramos a resposta baseado na URL acessada;
- Com url processamos os parâmetros que vem pela query string, para alterar a lógica do http;
- Vamos ver na prática;
_______________________________________________________

Renderizando HTML com fs

- O módulo fs(File System) serve para trabalhar com arquivos e diretórios;
- Este é também um core module;
- Podemos ler e escrever em arquivos, por exemplo;
- Uma utilização interessante: logs do sistema;
- Vamos ver na prática;
_______________________________________________________

Escrevendo em arquivos

- Podemos criar e escrever em arquivos também, utilizando o método writeFile;
- Esta escrita pode estar associada a um conjunto de operações;
- Como o envio de informações de um usuário, por exemplo;
- Vamos unir mais uma vez os módulos na prática!
_______________________________________________________

Atualizando um arquivo

- O writeFile substitui tudo que está em um arquivo;
- E se quisermos atualizar?
- Para este fim utilizamos o appendFile;
- Que tem a mesma utilização que write, porém nos permite unir conteúdo;
- Vamos ver na prática;
_______________________________________________________

Removendo um arquivo

- Para remover um arquivo com o fs utilizamos o método unlink;
- Preciisamos passar o arquivo como parâmetro;
- Temos possibilidade de checar se houver algum erro, a partir da call-back retornada;
- Vamos ver na prática;
_______________________________________________________

Renomeando um arquivo

- Para renomear um arquivo com o fs utilizamos o método rename;
- Precisamos passar o arquivo como parâmetro;
- E também o novo nome!
- Neste método também podemos verificar algum eventual erro, pela call-back;
- Que pode ser ativado quando o arquivo alvo não existe;
- Vamos ver na prática;
_______________________________________________________

Rotas com Node.js puro

- Podemos criar um sistema de roteamento simples com Node.js e seus Core Modules;
- As rotas basicamente as páginas que acessamos nos sites;
- Vamos falar mais sobre esse recurso em outros módulos;
- A ideia é identificar os arquivos acessados pela URL e retorná-los, se existirem;
- Vamos ver na prática;
_______________________________________________________

Verificando dados de arquivos

- Podemos saber mais sobre os arquivos que temos acesso;
- Utilizamos o método stat de fs;
- Com ele temos informações de: tamanho, data de criação se é arquivo ou diretório e tc;
- Vamos ver na prática;
_______________________________________________________

Módulo path

- Com o path conseguimos extrair diversas informações sobre caminhos e arquivos;
- Este também é um Code Module;
- Algumas infos possíveis são: nome do diretório, nome do arquivo, extensão do arquivo e etc;
- Vamos ver na prática;
_______________________________________________________

Path absoluto e formar path

- Com a função resolve é possível saber qual o path completo até o arquivo alvo;
- E com a função join é possível formar um path dinâmico, com variáveis e valores fixos;
- São duas funções muito importantes;
- Vamos ver na prática!
_______________________________________________________

Trabalhando com diretórios

- Com o módulo fs também podemos trabalhar com diretórios (pastas);
- O método exiss pode evidenciar se um diretório existe ou não;
- E o método mkdir pode criar um diretório;
- Vamos ver na prática;
_______________________________________________________

Módulo os

- Com o módulo os podemos extrair informações do sistema operacional;
- Este também é um Core Module;
_______________________________________________________

NPM -> node package manager

Oque é NPM ?

- É o principal gerenciador de pacotes do Node.js;
- A sigla significa: Node Package Manager;
- A maioria dos projetos que vamos trabalhar em Node, também terá atuação do npm;
- Podemos nãos só instalar pacotes, mas também configurar o projeto e rodar scripts por meio do npm;
- A criação de um projeto gera sempre um arquivo, o package.json;
_______________________________________________________

Criando um projeto com npm

- Para iniciar um projeto, podemos utilizar o comando npm init;
- Seremos questionados para configurar algumas opções iniciais;
- Como o nome do projeto;
- E então package.json condensando as informações é criado;
- Isto caracteriza o início do projeto com nppm e Node;
- Vamos ver na prática;
_______________________________________________________

Criando projeto de forma rápida

- voltado para o ambiente de aprendizado e este para não ficar respondendo todas perguntas base;
- Basta executar npm init -y;
_______________________________________________________

Instalando um pacote

- Para instalar um pacote vamos utilizar o comando npm install <nome>;
- Onde <nome> será substituído pelo nome do pacote;
- Quando fazemos desta maneira a instalação uma pasta node modules é criada;
- Nela todos os arquivos de módulos de terceiro são armazenados;
- Sempre que rosamos o comando npm install, a pasta node modules é recriada com todos os módulos do package.json;
_______________________________________________________

Onde encontrar os módulos ?

- npmjs.com
_______________________________________________________

Instalando um pacote como dev

- Há uma possibilidade de instalar pacotes apenas para o ambiente de desenvolvimento;
- Utilizamos a flag --save-dev;
- Isso faz com que ele seja separado no package.json dos demais;
- E então na build de produção não instalaremos estes módulos;
- Um exemplo:servidor para ambiente local, como o Nodemon;
- Vamos ver na prática;
_______________________________________________________

Atualização de pacotes

- Constantemente os pacotes do npm são atualizados por seus desenvolvedores;
- Temos então o comando npm update;
- Que vai fazer a atualização de todos os pacotes instalados no package.json;
- É possível atualizar um pacote específico com npm update <nome>

- Ou também npx npm-chack-updates -u
_______________________________________________________

Criando scripts

- É possível criar rotinas com o npm também;
- Ou seja, executamos uam série de comandos com apenas um;
- Utilizamos npm run <script>
- Onde <script> é o nome da sequência de comandos que configuramos;
- Vamos ver na prática
_______________________________________________________

Instalando pacote global

- um pacote global não fica salvo na pasta node modules do projeto;
- Ele fica salvo no computador do usuário;
- A vantagem é que podemos acessá-lo em qualquer local via terminal;
- Utilizamos a flag-g em node install;
- vamos ver na prática;
_______________________________________________________

Executando scripts com npx

- Alguns pacotes são scripts executáveis, que resultam em alguma ação no nosso computador;
- Como por exemplo a instalação do React, que é feita pelo npx;
- Desta maneira uma série de processos são simplificados por este executor;
- Vamos ver na prática;
_______________________________________________________

Remover pacote com npm

- Para remover um pacote utilizamos o comando npm unistall <nome>;
- Substituindo <nome> pelo nome do pacote;
- Isso faz com que o pacote seja removido do package.json também;
- vamos ver na prática;
_______________________________________________________

EXPRESS

- Um framework para Node.js muito utilizado;
- Serve para criarmos aplicações web;
- Nele podemos criar rotas, renderizar HTML, conectar a um banco de dados;
- O Express torna a criação de apps muito mais simplificada, do que com os Core Modules;
- Vamos instalá-lo;

- npm install express

- tem também adônis.js
_______________________________________________________

Oque são rotas

- Rota é um conceito super importante e presente em aplicações web;
- Basicamente são as URL's que acessamos;
- Se criamos uma rota/produtos, podemos acessar através da URL www.nossosite.com/produtos;
- Quando o usuário acessa podemos acessar várias lógicas, como carregar produtos do banco de dados;
- Ou seja, rotas são uma ponte entre o usuário e a lógica da aplicação;
_______________________________________________________

Primeiros passos 

- O setup inicial do Express é simples, mas precisamos seguir alguns passos;
- Importar o Express e invocá-lo;
- Definir uma porta base para a aplicação;
- Criar uma rota (URL que será acessada);
- Executar o método listen na porta especificada;
- Vamos ver na prática!
_______________________________________________________

Renderizando HTML 

- Para enviar HTML como resposta utilizamos o método sendFile;
- Isso faz com que o arquivo seja renderizado no navegador;
- Precisamos acessar o arquivo por meio do diretório base, isso requer o módulo path;
- Vamos ver na prática!
_______________________________________________________

Problema de atualização

- Precisamos toda vez reiniciar o servidor para receber as atualizações, isso é muito custoso;
- Vamos então instalar o módulo Nodemon;
- Que a cada vez que o arquivo é salvo reinicia o projeto, facilitando nossa vida;
- Vamos salvar como dependência de desenvolvimento (--save-dev);
- Vamos ver na prática;
_______________________________________________________

Middlewares

- Middlewares são códigos que podem ser executados no meios/entre(middle) de alguma ação e outra;
- Por exemplo: verificar se usuário está logado, podemos ter um para esta verificação;
- O método que nos dá acesso a utilizar middlwares é o use no Express;
- vamos ver na prática!
_______________________________________________________

Parâmetros por URL

- Podemos resgatar os parâmetros da URL por meio do req;
- Acessamos req.params.<nome>;
- Onde nome deve ser o que está definido na URL do Express;
- Que fica desta forma:/users/:id;
- Neste caso estaríamos buscando o usuário no banco de dados pelo id;
- E o parâmetro vem pela URL;
_______________________________________________________

Enviado dados por POST

- Para enviar os dados vamos precisar criar um form e mandar os dados via POST para alguma URL;
- No Express precisamos colocar alguns middlewares como o express.json para ler os dados do body;
-  também uma rota que vai receber estes dados, utilizando o método post do Express;
- Vamos ver na prática!
_______________________________________________________

Módulo de rotas 

- Podemos unir várias rotas em um módulo, isso vai deixar nosso código mais organizado;
- Normalmente criamos uma pasta ou arquivo que contém estas rotas;
- Que representam uma entidade em comum, como users;
- Vamos utilizar um novo objeto chamado Router, e colocar as rotas nele;
- Depois precisamos exportá-lo e importar no arquivo principal;
_______________________________________________________

Colocando CSS

- Para inserir nas páginas e arquivos estáticos vamos precisar de um middleware;
- Que é o express.static;
- Precisamos colocar um diretório base, que normalmente é o public;
- E criar os estáticos a partir desta pasta;
- No HTML podemos acessar o caminho relativo após a pasta definida, e pronto;
_______________________________________________________

Criando uma página 404

- Para criar uma página 404, ou seja, quando o usuário acessa uma página que não existe;
- Basta criar um novo middleware abaixo de todas as rotas, que responde com este status;
- E enviar um arquivo de template referente a esta página;
- Vamos ver na prática;
_______________________________________________________

Template Engine

O que é Template Engine ?

- Uma forma de deixar o HTML dinâmico, inserindo variáveis do backe-end no front-end;
- Podemos também criar layouts, que são reaproveitados;
- É essencial para projetos que usam banco de dados, que não são estáticos;
- Temos diversos disponíveis: EJS, Pug, Handlebars, por exemplo;
- Todos atingem o mesmo objetivo, porém há algumas diferenças de setup e funcionalidades;
_______________________________________________________

Conhecendo o Handlebars

- O handlebars é uma das template engines mais utilizadas;
- Colocamos os dados dinâmicos no HTML entre {{}} para serem impresso;
- Podemos criar condicionais e também loops no template;
- Conhecido pela sua sintaxe limpa n front, nos força a não executar lógica no HTML;
- O nome do pacote é express-handlebars;
_______________________________________________________

Mudança no Handlebars

- Houve alteração que vai quebrar o código;
- Para reparar basta trocar esta linha de código;

app.engine('handlebars', exphbs())

- por

app.engine('handlebars', exphbs.engine())
_______________________________________________________

Instalando o Handlebars

- Vamos precisar instalar o Express eo Handlebars, para o correto funcionamento;
- Podemos também utilizar o Nodemon, para nos ajudar;
- No index precisamos importar os pacotes instalados;
- E também adicionar ao Express a engine do Handlebars;
- Criaremos uma view no diretório views, com a extensão handlebars;
- Utilizamos o método render para enviar esta view para a requisição;
_______________________________________________________

Criando layouts

- Podemos criar layouts para reaproveitar código entre páginas;
- Vamos criar uma pasta chamada layouts em views;
- E nela criamos o template que será repetido;
- Colocamos uma tag especial {{{body}}};
- Para que neste local o 'corpo' do site seja inserido;
- Em todas as nossas views agora o layout é repetido;
_______________________________________________________

Passando dados para a view

- Vamos passar os dados por meio do método render;
- Enviamos um objeto com chaves e valores;
- E isso nos possibilita acessar estes dados no template;
- Vamos utilizar a sintaxe de {{{dado}}};
- E o dado será impresso;
_______________________________________________________

Utilizando condicionais

- Utilizar uma estrutura condicional nos permite mais flexibilidade no layout;
- Podemos utilizar o if no Handlebars;
- A sintaxe é {{#if alguma coisa }} {{/if}}
- Só imprime o que está entre as condicionais, se o resultado dela for verdadeiro;
- Precisamos encaminhar o dado a ser validado pelo backend;
_______________________________________________________

Utilizando o else

- O else é um complemento do if;
- Utilizamos no Handlebars para a exibição de outra parte do layout, caso a condição seja falsa;
- Isso nos dá mais flexibilidade ainda!;
- A sintaxe é: {{#if alguma coisa}} {{else}} {{/if}}
_______________________________________________________

Estrutura e repetição

- As estruturas de repetição no Handlebars são feitas pelo operador each;
- A sintaxe é {{#each }}...{{/each}}
- Em um array podemos chamar os itens com: {{this}}
- Então cada um dos itens é acessado na viw;
- Como o Handlebars prega um template mais limpo, devemos mandar apenas o necessário para o front-end;
_______________________________________________________

Utilizando o with

- O with nos permite abstrair um objeto;
- Ou seja, podemos acessar as propriedades sem nos referenciarmos sempre ao objeto antes;
- A sintaxe é: {{#with objeto}}...{{/with}}
- Desta maneira nosso código fica ainda mais simples;
_______________________________________________________

Conhecendo os partials

- Os partials são como mini templates, que precisam ser repetidos em diversos locais da nossa aplicação;
- Precisamos realizar algumas modificações na implementação do Handlebars;
- Os partinals geralmente ficam em views/partials;
- E Utilizamos a sintaxe: {{> partial}} para chamá-lo no projeto;
_______________________________________________________

CSS com Handlebars e Express

- A inclusão de CSS no Handlebars é muito semelhante a que realizamos apenas com Express;
- Precisamos definir a pasta dos arquivos estáticos;
- E vamos linkar o CSS com o nosso layout em comum para todas as páginas;
- Isso torna possível a estilizar os nossos projetos;
_______________________________________________________

SEQUELIZE

Oque é ORM ?

- Object Relational Mapper(ORM);
- Abstrai a complexidade das queries, para trabalharmos com métodos;
- Nos concentramos na regra de negócios e não nos comandos SQL;
- Uma ORM muito utilizada para Node.js é a sequelize;
- Em alguns casos uma ORM pode trazer pejuízos de performance;
- A query pura executa mais rapidamente do que a ORM;
- Temos código "gerado", ou seja, não vemos por baixos dos panos;
_______________________________________________________

Oque é Sequelize ?

- Uma ORM para Node.js;
- Ela é baseada em promises (then, catch);
- Tem integração para vários bancos relacionais, como o mysql;
- Precisamos sempre criar um Model, que é o reflexo da nossa tabela em uma classe;
- Precisamos instalar o pacote, já que é um módulo externo;
_______________________________________________________

Instalando o SEQUELIZE

- Para instalar o Sequilize utilizamos o pacote sequelize;
- E para conectar precisamos passar os mesmos dados que no outro pacote: banco, usuário e senha;
- Instaciando a classe Sequelize;
- É possíivel checar a conexão com o método authenticate;
- Vamos ver;

IMPORTANTE para o sequelize funcionar tem que tem mysql2 como driver

npm install mysql2
_______________________________________________________

Criando o Model

- Para criar um Model temos que instanciar uma classe que representará um tabela;
- Um Model User cria uma nova tabela chamada users;
- Colocamos os campos e os tipos dele como propriedades do Model;
- Futuramente ele será utilizado para as operações entre aplicação e banco;
- O método sync faz a criação das tabelas baseada nos models;

_______________________________________________________

Forçando a recriação de banco de dados 

- Podemos forçar a reconstrução das tabelas;
- No método sync, onde são sincronizados os models e as tabelas;
- Vamos colocar um atributo force como true;
- exemplo syn({force: true})
- note que os dados são perdidos neste processo;

_______________________________________________________

Sobre os relacionamentos

- Em bancos relacionais podemos criar relacionamentos entre as tabelas;
- para concretizar isso no Sequelize vamos precisra de dois Models, ou seja, precisamos criar mais um no nosso projeto;
- Deposi precisamos inserir um método de realcionamento em algum dos moldes que vai criar a relação;
- após o sync uma coluna que faz a relaçõa entre as tabelas será criada;
- Que representa a foreign key;
_______________________________________________________

Adicionando dado relacionado

- Para adicionar o dado relacionado o fluxo é quase o mesmo;
- O grande detalhe é que precisamos passar o id do item que o relaciona;
- Podemos fazer com um input do tipo hidden;
- Dentro do form que contém os dados do novo item;
- E enviando para uma nova rota no nosso sistema;
_______________________________________________________

Resgatando dados relacionados

- Precisamos definir as relações entre os dois Models, podemos fazer isso no Model de endereços;
- Depois basta utilizar o operador include com o nome do Model, onde estamos resgatando o dado;
- Isso faz com que os registros associados também venham na seleção;
- Como há dados relacionados precisamos remover o raw;
_______________________________________________________

Excluindo registro relacionado

- Para remover itens relacionados utilizaremos o memso processo de remoção de itens;
- Criaremos um formu´lario que envia o id do item;
- E uma rota para receber estas informações e executar a remoção utilizando o método destroy;
_______________________________________________________

MVC 

Oque é MVC ?

- Um acrônimo de MODEL VIEW CONTROLLER
- É um padrão de arquitetura de software, que pode deixar nossas aplicações mais organizadas;
- A aplicação é dividida em camadas, cada sua responsabilidade;
- Teremos uma nova estrutura de arquivos e pastas;
- E a aplicação obedece um novo fluco, que se repete para todas as ações;
- aplicações em MVC tendem a ter uma manutenção/evolução mais fácil;
_______________________________________________________

O papel do Model no MVC (Camada do modelo (MODEL))

- É um acamda onde vamos interagir com o banco de dados;
- Normalmente interage com os arquivos do Controller;
- Responsável por resgatar, atualizar, remover e criar dados;
- è comum que cada tabela seja um Model, assim como fazemos com o setup do Sequilize;
- Os Models são quem controlam a arquitetura do sistema, é fácil entender a regra de négocio analisando eles;
_______________________________________________________

O papel da View no MVC (Camada do modelo (VIEW))

- É onde apresentamos os dados que estão no banco;
- Geralmente a view interage com o controller, que é o meio de campo;
- E também nas views temos a interação com o usuário, como formulários para inserir dados no sistema;
- É correto não haver lógica/regra de negócios na view, ou o mínimo possível;
- Normalmente a exibição é feita através do HTML;
_______________________________________________________

O papel da View no MVC (Camada do modelo (CONTROLLER))

- É onde temos a interação entre Model e view;
- Podemos definir qual view será impressa, processar dados que foram enviados para o banco ou para a view;
- Os controllers terão um código parecido com os das rotas, que estamos criando até então no curos;
_______________________________________________________

Nossa estrutura Com MVC

- Nossa estrutura será composta por:
- controllers: pasta que ficam os arquivos de Controller;
- models: pasta que ficam os arquivos de Model;
- views: pasta que ficam os arquivos de view;
- routes: pasta que ficam os arquivos de rotas;
- index.js: arquivo que inicializa a aplicação;
_______________________________________________________

Criando nosso Model

- Vamos criar nosso Model dentro da pasta models;
- Precisamos também sincronizar para criar a tabela, então vamos importar no index.js
- Este é o primeiro passo do nosso MVC, declarando uma entidade que faz parte da regra de negócio;
_______________________________________________________

Criando o Controller

- Vamos agora criar nosso controller, que ficará dentro da pasta controller;
- Será uma classe que contém ad funções com a lógica de cada rota;
- Algumas só encaminharão as views, outras vão processar dados e passar para os Models;
- Por isso vamos importar o Model que o controller utiliza;
_______________________________________________________

Criando as rotas

- Criaremos as rotas com ajuda do router;
- onde cada arquivo será responsável por um controller;
- E em cada rota vamos utilizar uma das funcões do controller;
- Por isso vamos importar o controller responsável pela lógica das rotas;
- O routre precisa ser importado no index da aplicação;
_______________________________________________________

Dando uma cara ao projeto

- Vamos aproveitar este início de estrutura e criar um projeto completo em MVC;
- Primeiramente vamos dar alguns estilos iniciais;
- E depois voltamos as outras partes da aplicação para avançar no nosso projeto;
_______________________________________________________

Salvando dados

- Agora é a hora de interagir com o banco;
- Ou seja, criar um vinculo entre um Controller e um Model;
- Criaremos uma nova função para tratar os dados e enviaremos para o banco;
- Como o Sequelize tem alguns métodos prontos, o trabalho do nosso Model fica fica mais simples;
_______________________________________________________

Resgatando dados

- Para resgatar dados o processo é semelhante;
- Vamos criar uma rota get que acessar uma função do Contrroler;
- Nesta função tratremos os dados através do Model;
- E assim podemos imprimir o HTML;
_______________________________________________________

Removendo dados

- Para remover um dado vamos utilizar o método destroy do Sequelize;
- Condicionado por um POST que vai até a rota determinada pelo router;
- Ativando uma função do Controller;
- E depois direcionamos para a home novamente;
_______________________________________________________

Editando dados

- O primeiro passo da edição nós ja sabemos: resgatar dado e colocar no formulário em uma nova view;
- Para isso vamos precisar de uam função no Controller, pegando os dados via Model;
- E então criar arota que corresponde a um id de uma Task, neste caso;
- preenchendo os valores dos inputs com o que foi restatado do banco; 
_______________________________________________________

Enviando dados para editar 

- Agora no passo final, precisamos enviar os dados;
- Vamos criar uma nova função no Controller que processa o que veio do form;
- Esta mesma função cham o model e executa a função de update;
- Retornando assim o usuário para onde ele possa ver a Task atualizada;
_______________________________________________________

Completando tarefas

- Realizaremos uma ação do nsso sistema para completar ou "descompletar" as tarefas;
- Basicamente vamos criar uma rota de update que só atualiza o atributo done de Task;
- Precisamos de um form na lista para fazer o envio e também criar a rota;
_______________________________________________________

Projeto pensamento

- Dependência utilizadas

npm install 
bcryptjs 
connect-flash 
cookie-parser 
cookie-session 
express 
express-flash 
express-session 
mysql2 
sequelize 
nodemon 
session-file-store
express-handlebars

npm install express-handlebars bcryptjs connect-flash cookie-parser cookie-session express express-flash express-session mysql2 sequelize nodemon session-file-store
_______________________________________________________

MongoDB

Oque é NoSQL ?

- São bancos de dados focados em documentos(documents);
- A modelagem de dados com relacionamentos é opcional;
- Não utilizamos queries e sim métodos de classes para trabalhar com os dados;
- As tabelas não exitem, temos as collections
- Não precisamos definir a estrutura da collection previamente;
- MongoDB é um banco NoSQL;
_______________________________________________________

Oque é MongoDB ?

- Um banco de dados orientado a documento;
- Os dados ficam salvos em estruturas parecidas com JSON;
- Na verdade os dados tem um nome chamado "BJSON";
- Frequentemente utilizado com Node.js;
- Diferente do SQL temos indices primários e secundários;
- Utilizaremos um driver para conectar a nossa aplicação com o MongoDB semelhante ao MySQL e Sequelize;
_______________________________________________________

Para trabalhar com MongoDB no windowns é necessário duas ferramentas

- MongoDB que é o sistema do banco de dados;
- MongoDB tools, ferramenta para importação e exportação de bancos;
_______________________________________________________

Principais entidades

- Database: é onde ficam as nossas collections e dados;
- Collections: são como as tabelas nos bancos relacionais, nelas vamos inserir os dados;
- Documents: são os dados, no MongoDB tem esta nomenclatura;
- Collections podem ser criadas livremente a qualquer momento e não possuem colunas fixas para os dados;
 _______________________________________________________

 MongoDB e JSON
 - O tipo de dado inserido na tabela é o BSON, uma variação de JSON;
 - O BSON é semelhante ao JSON, porém com recursos a mais ;
 - A forma de criar um BSON é igual ao JSON, veja;
 {
    name: "VICTOR",
    age:24
 }

 BSON mongoDB - caso queira conhecer mais a documentação;
 _______________________________________________________

Primeiro mergulho

- Vamos agora dar o nosso primeiro mergulho no MongoDB;
- Nossa missão será criar um banco de dados;
- Criar uma collection;
- Inserir um dado e resgatar este mesmo dado por meio de um find;
- Obs: aprenderemos todos estes comandos posteriormente!;
_______________________________________________________

Conectando ao MongoDB

- Primeiramente vamos precisar instalar o driver no MongoDB, que é mongodb (um pacote de npm);
- Depois criaremos a conexão, baseada em uma URL com o protocolo mongodb://
- Através da classe MongoClient

_______________________________________________________

Criando MVC

- Antes de trabalhar com MongoDB vamos criar uma estrutura MVC;
- Isso vai fortalecer nossos conhecimentos com a arquitetura;
- E também poderemos comparar o trabalho com SQL x NOSQL;
_______________________________________________________

Inserindo dados 

- Primeiramente vamos criar um Model, onde este será uma classe de JavaScript, para seguir o MVC;
- Depois utilizaremos o Model para criar o método save, que executa o insertOne de MongoDB;
- Por fim é necessário criar o formulário que interage com a rota do sistema;
_______________________________________________________

Resgatndo dados

- Para resgatar os dados de uma collection vamos utilizar o método find de MongoDB;
- Os dados vem em um cursos, para converter em array utilizamos toArray;
- Depois é só passar os dados para o controller e exibir na view;
_______________________________________________________

Resgatando um dado 

- Para resgatar um dado vamos utilizar o método findOne;
- Onde podemos filtrar por um campo, que no nosso caso vai ser o _id;
- Vamos enviar o dado para o Controller e depois para a view;
_______________________________________________________

Excluindo dados

- Para remover um dado do banco, vamos utilizar o método deleteOne;
- que recebe um filtro como no de resgatar dados, utilizaremos o campo _id;
- Basta executar o método no controller e redirecionar após a remoção;
_______________________________________________________

Editar dado - -> editar get

- Para editar um dado, Primeiramente vamos criar uma view que mostra o formulário preenchido;
- A ideia é parecida com a de getProduct do nosso projeto;
- Vamos utilizar o atributo value do input para preencher o campo com a valor salvo;
_______________________________________________________

Editar dado - -> editar post

- Para salvar um dado editado será necessa´rio criar um método no Model;
- Que utiliza o método updateOne do MongoDB;
- Onde passamos o id e também os dados para atualizar;
- Criaremos também uma função no Controller e a rota;
_______________________________________________________

MONGOOSE

Oque é ODM ?

- Um acrônimo para Object data Mapping, ou seja, mapeamento de dados por objeto;
- Em MongoDB utilizamos ODMs para deixar mais ágil o processo de trabalho com os dados;
- Basicamente um Model ficará responsável pelas interação com um BD;
- A ODM mais utilizada para MongoDB é a Mongoose;
- ORM e ODRM tem funções e utilizações muito semelhante;
_______________________________________________________

Oque é Mongoose ?

- Mongose é a ODM mais utilizada para MongoDB;
- Onde declaramos um Model, que faz as interações com a collection que ele corresponde;
- Definimos nesse Model os dados e seus tipos, como estamos esperando que a colletion fique;
- Isso se assemelha ao SQL, e ajuda na organização/manutenção;
- Como nas ORMs temos métodos prontos para interagir com o DB;
_______________________________________________________

Intalando o Mongoose

- nesse ponto vamos instalar o pacote e fazer algumas alteraçãoe no arquivo conn.js;
- copiado tudo da seção anterior;

- npm install mongoose;
_______________________________________________________

Criando o Schema

- Agora vamos criar uma parte muito importante das aplicações que tem o Mongoose: o Schema;
- Que é um esqueleto do nosso elemento a ser inserido na collection;
- Vamos criá-lo no Model da aplicação;
_______________________________________________________

Inserindo dados com mongoose 

- Para inserir dados vamos utilizar o método save do Mongoose;
- Este método é da própria biblioteca, ou seja, não vamosutilizar o do nosso Model, que usamos no MongoDB;
- O restante fica bem parecido, passamos os dados a serem inseridos em um objeto para save;
_______________________________________________________

Resgatando dados

- Para resgatar os dados vamos utilizar o método find do Mongoose;
- É necessário o método lean também para formatar os dados, de forma que o Handlebars consiga utilizar;
- apenas com estas alterações já estamos prontos;
_______________________________________________________

Resgatando dado individual

- Para encontrar um único item vamos utilizar o método findById;
- Neste caso não pecisamos converter o id para o padrão do MongoDB o mongoose faz isso para nós;
- E também utilizaremos o lean novamente;
_______________________________________________________

Edição de dados - get 

- Para preencher o formulário de edição vamos utilizar novamente o findById;
- mo método lean nos ajuda a receber os dados para o handlebars;
- E pronto, nosso código já se adapta aos outros processo;
_______________________________________________________

Edição de dados - post

- OBS: para resolver um warning vamos colocar as rotas em /products;
- Depois basta utilizar método updateOne, onde passamos um filtro para atingir o registro correto;
- E também um objeto com os dados de atualização;
_______________________________________________________

Removendo dado

- Para remover um dado utilizaremos o método deleteOne;
- Que leva simplesmente o filtro como argumento, neste caso utilizaremos o _id;
- Depois basta redirecionar o usuário;
_______________________________________________________