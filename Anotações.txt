OQUE É NODE.JS?

- O node.js é uma runtime de JavaScript;
- Ou seja, uma biblioteca utilizada por um compilador durante a execução do programa;
- que esta construída na V8 engine(escrita em C++ da Google);
- Possibilitando criar softwares em JS no lado do servidor;
- Temos então um código JS rodando em C++ para garantir alta performance;

_______________________________________________________

Oque é NPM ?

- O npm é um gerenciador de pacotes do Node;
- Vamos poder utilizar bibliotecas de terceiros, baixando elas pelo npm;
- E também executar determinados scripts no nosso programa;
- Dificilmente um software em node.js não utiliza o npm;
- Os módulos externos ficam numa pasta chamada node_modules; 
- Ela deve ser descartável, ou seja, a cada instalação do projeto baixamos todos os pacotes novamente;
_______________________________________________________

Instalação Node Windows

- O download do node.js é feito no site oficial nodejs.org
- Vamos baixar um arquivo .msi, que é o instalador;
- É interessante saber que o npm vem junto do Node;
- Após a instalação podemos testar o Node eo npm em um terminal, para validar a instalação;
- Note que os binários precisam estar no PATH, este passo está na instalação no node;
_______________________________________________________

Instalação cmder

- Caso seja necessário, vamos utilizar o cmder como terminal do Windows;
- Este software não quer instalação;
- E é muito semelhante ao terminal do Linux;
- Geralmente utilizamos servidores em Linux, então estar acostumado com esse tipo de terminal é de grande ajuda;
- Além disso, algumas ferramentas como Node e Docker, por exemplo utilizam muito o terminal;
______________________________________________________

Executando o node

- Na maioria das vezes estaremos executando o node via arquivos do nosso projeto;
- Porém é possível também executá-lo via terminal;
- Basta digitar: node;
- O Node.js possui todas as funcionalidades de JavaScript;
- O nome do recurso é REPL (read evaluate print loop)
- Vamos experimentar!
_______________________________________________________

Nosso primeiro programa

- Agora vamos criar algo mais sólido, um programa simples baseado em um arquivo;
- A extensão dos arquivos de Node serão .js
- Vamos executar o arquivo com o comando node <arquivo>
- O código será interpretado e o programa executado;
_______________________________________________________

Utilizando um módulo

- Agora vamos evoluir o nível de nosso programas;
- Importaremos um módulo do Node: o file System;
- Este módulo serve para trabalhar com diretórios, arquivos e etc;
- E ele é um Core Module, ou seja, não é necessário instalar;
- veremos mais sobre modules ao longo do curso;
- Podemos importar módulos com a instrução import;
_______________________________________________________

Como tirar o melhor proveito

- Faça todos os exercícios, eles foram pensados em agregar no aprendizado e fixar conhecimento;
- Crie o código junto comigo!;
- Tente responder as dúvidas de outros alunos;
- Crie projetos práticos, teste coisas novas;
- Dica extra: ouça e depois pratique;
_______________________________________________________

SEÇÂO DE FUNDAMENTOS

Oque são módulos

- Módulos são scripts reaproveitáveis, que utilizamos bastante programando em Node;
- Eles são divididos em três categorias;
- Internos: módulos que nós desenvolvemos
- Core Modules: módulos que vem com Node.js;
- Externos: módulos que instalamos via npm;
_______________________________________________________

Módulos internos

- Os módulos internos são criados nas pastas do nosso projeto;
- Precisamos exportar o módulo;
- Podemos utilizar a instrução module.exports;
- E importar onde precisamos utilizar;
- Para importar vamos utilizar a instrução require;
- Vamos criar um módulo!;
_______________________________________________________

Export e Import

- Com Node.js também é possível utilizar o export e import do ES6;
- São funcionalidades mais modernas de importação e exportação;
- Com mais recursos do que as que vimos anteriormente;
- Para isso precisamos modificar os nossos arquivos para a extensão .mjs;
- E então podemos exportar uma com export default;
- E importar com import, uma única função, caso seja necessário;
_______________________________________________________

Core Modules

- No node temos diversos Core Modules, que são os que vêm prontos para serem utilizados;
- Eles resolvem diversos problemas, como: trabalhar com arquivo e diretórios, servir aplicações e etc.
- Precisamos importar estes módulos no projeto para poder utilizar;
- Vamos utilizar um core module!
_______________________________________________________

Ler argumentos

- O Node permite o envio de argumentos via linha de comando;
- Passamos ele após a instrução de execução do arquivo;
- Os argumentos ficam em um array chamado:process.argv
- Onde podemos fazer um loop e resgatar os valores enviados;
- Vamos ver na prática;
_______________________________________________________

Módulos externos

- Os módulos externos podem ser instalados via npm;
- Para isso precisamos inicializar o npm no projeto, com: npm init;
- A partir daí os módulos ficam mapeados e podemos instalar módulos;
- Que são salvos na pasta node modules;
- Podemos instalar módulos com npm install <nome>;
- Vamos olhar isso na prática!
_______________________________________________________ 

Algo prático com argumentos

- Podemos utilizar os argumentos recebidos para aplicar no nosso programa alguma lógica;
- Basta encapsular em variáveis e depois utilizálos;
- Ou seja, podemos a partir do terminal, executar também uma função de módulo interno nosso, por exemplo;
- Vamos ver na prática!
_______________________________________________________

Explorando o console

- Temos uma grande variedade de métodos no console, como o console.log;
- podemos imprimir mais de uma variável por vez;
- Inserir variáveis entre strings;
- Há um método para limpar as mensagens de console;
- Vamos ver na prática
_______________________________________________________

Melhorando a visualização

- Há um módulo externo chamado chalk;
- Ele pode deixar a visualização do console mais agradável;
- Fazendo com que seja possível expressar um feedback com base em cores;
- Vamos ver na prática;
_______________________________________________________

Lendo entrada de dados

- Podemos ler dados do usuário com o módulo readline, um core module;
- Neste caso utilizamos o método question, que faz uma pergunta a ser respondida pelo usuário;
- Depois podemos processar a resposta e entregar um retorno;
- Vamos ver na prática;
_______________________________________________________

IMPORTANTE PARA O CURSO

- utilize esse pacote nessa versão para conseguir seguir o curso pois a versão mais recente possui algumas diferenças na importação, podendo gerar alguns erros.
 
npm install inquirer@8.1.2
_______________________________________________________

Melhorando sua leitura de dados 

- Há um módulo externo chamado inquirer;
- Que é muito mais completo para resgatar e lidar com o input do usuário;
- Além disso, é baseado em Promises, o que torna sua utilização mais simples;
- Vamos ver na prática
_______________________________________________________

Event Loop

- O Event Loop é um recurso da arquitetura do Node;
- O node.js executa uma linha por vez, e de cima para baixo do código escrito;
- Isso nos ajuda a evitar problemas de concorrência, garantindo a execução do código;
- Precisamos apenas cuidar com bloqueios no fluxo, como loops inifinitos;
- vamos ver na prática;
_______________________________________________________

Event Emitter

- O event Emitter se comporta como os eventos do navegador;
- Podemos ativar um código em alguns pontos da aplicação, como o início;
É um Core Module chamado events;
- Precisamos instanciar a classe EventEmitter que vem deste módulo;
- E então utilizar os métodos para atingir nosso objetivo;
- Vamos ver na prática;
_______________________________________________________

Síncrono e Assíncrono

- Em Node.js temos duas opções ao executar métodos;
- Conhecidas como sync e async;
- Forma síncrona: o código espera ser totalmente executado para prosseguir;
- Forma assíncrona: o código continue progredindo e em um ponto futuro obtém a resposta da execução assíncrona;
- Vamos ver na prática;
_______________________________________________________

Erros no Node

- Temos duas formas principais para gerar ou evidenciar erros em Node.js;
- throw: uma forma de encerrar um programa, gerando um novo erro;
- try catch: uma forma de evidenciar algo que deu errado em um bloco de código e exibir a mensagem de erro;
- Vamos ver na prática;
_______________________________________________________

Core Modules

Sobre os Core Modules

- vamos ver diversos Core Modules em detalhes, que são fundamentais para a criação de softwares em Node;
- http: módulo para criar servidores HTTP;
- path: extrair informações de paths (caminhos) de arquivos;
- fs: file system, leitura e escrita de arquivos;
- url: módulo para trabalhar com URLs;

_______________________________________________________

Módulo HTTP

- Podemos criar um servidor HTTp com este módulo;
- Ou seja, receber uma requisição e enviar código HTML como resposta por exemplo;
- Vamos utilizar alguns métodos como createServer, para  criação de servidor;
- E também listen, para determinar a porta;
- Vamos ver na prática;

- para visualizar a mensagem de resposta do servidor é necessário é no navegador e colocar localhost:3000 no meu caso porta definida por mim;
_______________________________________________________

Parando o serviço

- Há alguns serviços do Node que ocupam a aba do terminal para continuar rodando;
- Um destes é o módulo http;
- Para para este serviço basta utilizar: ctrl + c;
- Isso é útil quando há um problema no código também;
_______________________________________________________

Retornando HTML com http

- Para retornar HTML precisamos implementar mais recursos;
- Podemos adicionar um status code no retorno, com a propriedade statusCode;
- Mudar os headers para text/html;
- E retornar o HTML pelo método end http;
- Vamos ver na prática;
_______________________________________________________

Atualizações de projeto

- Para emitir as atualizações do projeto precisamos sempre reiniciar o servidor;
- Ou seja: salvar, encerrar e reiniciar, este é o processo;
- Isso é terrível para a produtividade;
- Nas próximas aulas veremos como controlar este problema;
- Mas primeiro vamos ver o que acontece;
_______________________________________________________

Modulo url

- O módulo url serve para decompor uma URL que passamos para o método parse;
- Podemos resgatar: host, path, search, query e etc;
- A partir destas informações podemos alterar a lógica do nosso código;
- Vamos ver na prática;
_______________________________________________________

Unindo os módulos http e url

- Podemos trabalhar com estes módulos juntos e ter um resultado interessante;
- com o http criamos nosso server e alteramos a resposta baseado na URL acessada;
- Com url processamos os parâmetros que vem pela query string, para alterar a lógica do http;
- Vamos ver na prática;
_______________________________________________________

Renderizando HTML com fs

- O módulo fs(File System) serve para trabalhar com arquivos e diretórios;
- Este é também um core module;
- Podemos ler e escrever em arquivos, por exemplo;
- Uma utilização interessante: logs do sistema;
- Vamos ver na prática;
_______________________________________________________

Escrevendo em arquivos

- Podemos criar e escrever em arquivos também, utilizando o método writeFile;
- Esta escrita pode estar associada a um conjunto de operações;
- Como o envio de informações de um usuário, por exemplo;
- Vamos unir mais uma vez os módulos na prática!
_______________________________________________________

Atualizando um arquivo

- O writeFile substitui tudo que está em um arquivo;
- E se quisermos atualizar?
- Para este fim utilizamos o appendFile;
- Que tem a mesma utilização que write, porém nos permite unir conteúdo;
- Vamos ver na prática;
_______________________________________________________

Removendo um arquivo

- Para remover um arquivo com o fs utilizamos o método unlink;
- Preciisamos passar o arquivo como parâmetro;
- Temos possibilidade de checar se houver algum erro, a partir da call-back retornada;
- Vamos ver na prática;
_______________________________________________________

Renomeando um arquivo

- Para renomear um arquivo com o fs utilizamos o método rename;
- Precisamos passar o arquivo como parâmetro;
- E também o novo nome!
- Neste método também podemos verificar algum eventual erro, pela call-back;
- Que pode ser ativado quando o arquivo alvo não existe;
- Vamos ver na prática;
_______________________________________________________

Rotas com Node.js puro

- Podemos criar um sistema de roteamento simples com Node.js e seus Core Modules;
- As rotas basicamente as páginas que acessamos nos sites;
- Vamos falar mais sobre esse recurso em outros módulos;
- A ideia é identificar os arquivos acessados pela URL e retorná-los, se existirem;
- Vamos ver na prática;
_______________________________________________________

Verificando dados de arquivos

- Podemos saber mais sobre os arquivos que temos acesso;
- Utilizamos o método stat de fs;
- Com ele temos informações de: tamanho, data de criação se é arquivo ou diretório e tc;
- Vamos ver na prática;
_______________________________________________________

Módulo path

- Com o path conseguimos extrair diversas informações sobre caminhos e arquivos;
- Este também é um Code Module;
- Algumas infos possíveis são: nome do diretório, nome do arquivo, extensão do arquivo e etc;
- Vamos ver na prática;
_______________________________________________________

Path absoluto e formar path

- Com a função resolve é possível saber qual o path completo até o arquivo alvo;
- E com a função join é possível formar um path dinâmico, com variáveis e valores fixos;
- São duas funções muito importantes;
- Vamos ver na prática!
_______________________________________________________

Trabalhando com diretórios

- Com o módulo fs também podemos trabalhar com diretórios (pastas);
- O método exiss pode evidenciar se um diretório existe ou não;
- E o método mkdir pode criar um diretório;
- Vamos ver na prática;
_______________________________________________________

Módulo os

- Com o módulo os podemos extrair informações do sistema operacional;
- Este também é um Core Module;
_______________________________________________________

NPM -> node package manager

Oque é NPM ?

- É o principal gerenciador de pacotes do Node.js;
- A sigla significa: Node Package Manager;
- A maioria dos projetos que vamos trabalhar em Node, também terá atuação do npm;
- Podemos nãos só instalar pacotes, mas também configurar o projeto e rodar scripts por meio do npm;
- A criação de um projeto gera sempre um arquivo, o package.json;
_______________________________________________________

Criando um projeto com npm

- Para iniciar um projeto, podemos utilizar o comando npm init;
- Seremos questionados para configurar algumas opções iniciais;
- Como o nome do projeto;
- E então package.json condensando as informações é criado;
- Isto caracteriza o início do projeto com nppm e Node;
- Vamos ver na prática;
_______________________________________________________

Criando projeto de forma rápida

- voltado para o ambiente de aprendizado e este para não ficar respondendo todas perguntas base;
- Basta executar npm init -y;
_______________________________________________________

Instalando um pacote

- Para instalar um pacote vamos utilizar o comando npm install <nome>;
- Onde <nome> será substituído pelo nome do pacote;
- Quando fazemos desta maneira a instalação uma pasta node modules é criada;
- Nela todos os arquivos de módulos de terceiro são armazenados;
- Sempre que rosamos o comando npm install, a pasta node modules é recriada com todos os módulos do package.json;
_______________________________________________________

Onde encontrar os módulos ?

- npmjs.com
_______________________________________________________

Instalando um pacote como dev

- Há uma possibilidade de instalar pacotes apenas para o ambiente de desenvolvimento;
- Utilizamos a flag --save-dev;
- Isso faz com que ele seja separado no package.json dos demais;
- E então na build de produção não instalaremos estes módulos;
- Um exemplo:servidor para ambiente local, como o Nodemon;
- Vamos ver na prática;
_______________________________________________________

Atualização de pacotes

- Constantemente os pacotes do npm são atualizados por seus desenvolvedores;
- Temos então o comando npm update;
- Que vai fazer a atualização de todos os pacotes instalados no package.json;
- É possível atualizar um pacote específico com npm update <nome>

- Ou também npx npm-chack-updates -u
_______________________________________________________

Criando scripts

- É possível criar rotinas com o npm também;
- Ou seja, executamos uam série de comandos com apenas um;
- Utilizamos npm run <script>
- Onde <script> é o nome da sequência de comandos que configuramos;
- Vamos ver na prática
_______________________________________________________

Instalando pacote global

- um pacote global não fica salvo na pasta node modules do projeto;
- Ele fica salvo no computador do usuário;
- A vantagem é que podemos acessá-lo em qualquer local via terminal;
- Utilizamos a flag-g em node install;
- vamos ver na prática;
_______________________________________________________

Executando scripts com npx

- Alguns pacotes são scripts executáveis, que resultam em alguma ação no nosso computador;
- Como por exemplo a instalação do React, que é feita pelo npx;
- Desta maneira uma série de processos são simplificados por este executor;
- Vamos ver na prática;
_______________________________________________________

Remover pacote com npm

- Para remover um pacote utilizamos o comando npm unistall <nome>;
- Substituindo <nome> pelo nome do pacote;
- Isso faz com que o pacote seja removido do package.json também;
- vamos ver na prática;
_______________________________________________________

EXPRESS

- Um framework para Node.js muito utilizado;
- Serve para criarmos aplicações web;
- Nele podemos criar rotas, renderizar HTML, conectar a um banco de dados;
- O Express torna a criação de apps muito mais simplificada, do que com os Core Modules;
- Vamos instalá-lo;

- tem também adônis.js
_______________________________________________________

